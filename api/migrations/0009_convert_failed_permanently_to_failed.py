# Generated by Django 5.2.3 on 2025-07-19 10:47

from django.db import migrations


def convert_failed_permanently_to_failed(apps, schema_editor):
    """Convert existing failed_permanently entries to failed"""
    URLRequestTable = apps.get_model('api', 'URLRequestTable')
    
    # Convert failed_permanently to failed
    updated_count = URLRequestTable.objects.filter(
        status='failed_permanently'
    ).update(status='failed')
    
    print(f"Converted {updated_count} entries from 'failed_permanently' to 'failed'")


def reverse_convert_failed_permanently_to_failed(apps, schema_editor):
    """Reverse migration - convert failed back to failed_permanently if needed"""
    # Note: This is not a perfect reverse since we can't distinguish which
    # 'failed' entries were originally 'failed_permanently', but for data
    # safety we include the reverse function
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0008_simplify_status_choices'),
    ]

    operations = [
        migrations.RunPython(
            convert_failed_permanently_to_failed,
            reverse_convert_failed_permanently_to_failed
        ),
    ]
