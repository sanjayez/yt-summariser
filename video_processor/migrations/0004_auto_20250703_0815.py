# Generated by Django 5.2.3 on 2025-07-03 08:15

from django.db import migrations
from youtube_transcript_api import YouTubeTranscriptApi
import yt_dlp
import logging

logger = logging.getLogger(__name__)

def backfill_transcript_data(apps, schema_editor):
    """Backfill transcript_data for existing transcripts"""
    VideoTranscript = apps.get_model('video_processor', 'VideoTranscript')
    
    transcripts_to_update = VideoTranscript.objects.filter(
        transcript_data__isnull=True,
        status='success'
    )
    
    logger.info(f"Backfilling {transcripts_to_update.count()} transcripts")
    
    for transcript in transcripts_to_update:
        try:
            # Extract video ID from URL
            url = transcript.url_request.url
            video_id = extract_video_id(url)
            
            if video_id:
                # Get transcript with timestamps
                youtube_transcript = YouTubeTranscriptApi.get_transcript(video_id)
                transcript.transcript_data = youtube_transcript
                transcript.save()
                logger.info(f"Updated transcript {transcript.id}")
            
        except Exception as e:
            logger.warning(f"Failed to backfill transcript {transcript.id}: {e}")

def extract_video_id(url):
    """Extract video ID from YouTube URL"""
    try:
        ydl_opts = {'quiet': True, 'no_warnings': True}
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return info.get('id')
    except Exception:
        return None

def reverse_backfill(apps, schema_editor):
    """Reverse operation - clear transcript_data"""
    VideoTranscript = apps.get_model('video_processor', 'VideoTranscript')
    VideoTranscript.objects.update(transcript_data=None)

class Migration(migrations.Migration):

    dependencies = [
        ('video_processor', '0003_videotranscript_transcript_data'),
    ]

    operations = [
        migrations.RunPython(backfill_transcript_data, reverse_backfill),
    ]
