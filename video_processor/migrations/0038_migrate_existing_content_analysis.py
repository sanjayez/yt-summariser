# Generated by Django 5.2.3 on 2025-08-06 18:46

from django.db import migrations
from django.utils import timezone


def migrate_existing_content_analysis(apps, schema_editor):
    """
    Copy existing content analysis data from VideoTranscript to ContentAnalysis.
    
    This migration:
    1. Creates ContentAnalysis records for VideoTranscripts with existing content analysis
    2. Copies content_rating, ad/filler segments, ratios, and speaker_tones
    3. Sets appropriate status based on content_analysis_status
    """
    VideoTranscript = apps.get_model('video_processor', 'VideoTranscript')
    ContentAnalysis = apps.get_model('video_processor', 'ContentAnalysis')
    
    # Find VideoTranscripts that have content analysis data
    transcripts_with_content = VideoTranscript.objects.filter(
        content_analysis_status__in=['preliminary', 'final']
    ).exclude(
        content_rating__isnull=True,
        speaker_tones__exact=[],
        ad_segments__exact=[],
        filler_segments__exact=[]
    )
    
    migrated_count = 0
    
    for transcript in transcripts_with_content:
        try:
            # Skip if ContentAnalysis already exists
            if ContentAnalysis.objects.filter(video_transcript=transcript).exists():
                continue
                
            # Determine status based on content_analysis_status
            if transcript.content_analysis_status == 'preliminary':
                # Data exists but only preliminary (no timestamps/ratios)
                preliminary_status = 'completed'
                timestamped_status = 'pending'
            elif transcript.content_analysis_status == 'final':
                # Complete analysis with timestamps and ratios
                preliminary_status = 'completed' 
                timestamped_status = 'completed'
            else:
                # Fallback for edge cases
                preliminary_status = 'pending'
                timestamped_status = 'pending'
            
            # Create ContentAnalysis record
            content_analysis = ContentAnalysis.objects.create(
                video_transcript=transcript,
                preliminary_analysis_status=preliminary_status,
                timestamped_analysis_status=timestamped_status,
                
                # Copy tone analysis (always available)
                speaker_tones=transcript.speaker_tones or [],
                
                # Copy segments and ratios (may be empty for preliminary)
                content_rating=transcript.content_rating,
                ad_duration_ratio=transcript.ad_duration_ratio,
                filler_duration_ratio=transcript.filler_duration_ratio,
                ad_segments=transcript.ad_segments or [],
                filler_segments=transcript.filler_segments or [],
                content_segments=transcript.content_segments or [],
                
                # For preliminary data, we don't have separate raw segments
                # So we'll use the final segments as both raw and final
                raw_ad_segments=transcript.ad_segments or [],
                raw_filler_segments=transcript.filler_segments or [],
                
                # Set timestamps
                preliminary_completed_at=timezone.now() if preliminary_status == 'completed' else None,
                final_completed_at=timezone.now() if timestamped_status == 'completed' else None,
            )
            
            migrated_count += 1
            
        except Exception as e:
            # Log the error but continue with other records
            print(f"Failed to migrate content analysis for transcript {transcript.video_id}: {e}")
            continue
    
    print(f"Successfully migrated content analysis data for {migrated_count} video transcripts")


def reverse_migrate_content_analysis(apps, schema_editor):
    """
    Reverse migration: delete all ContentAnalysis records.
    
    Note: This will not restore data to VideoTranscript as we're not modifying
    VideoTranscript fields in this migration - that happens in the next migration.
    """
    ContentAnalysis = apps.get_model('video_processor', 'ContentAnalysis')
    deleted_count, _ = ContentAnalysis.objects.all().delete()
    print(f"Deleted {deleted_count} ContentAnalysis records")


class Migration(migrations.Migration):

    dependencies = [
        ('video_processor', '0037_add_content_analysis_model'),
    ]

    operations = [
        migrations.RunPython(
            migrate_existing_content_analysis,
            reverse_migrate_content_analysis
        ),
    ]
