# Generated by Django 5.2.3 on 2025-09-07 17:12

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('query_processor', '0004_alter_queryrequest_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommentsResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_id', models.CharField(db_index=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('failed', 'Failed'), ('success', 'Success')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('raw_comments', models.JSONField(blank=True, default=list)),
                ('processed_insights', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Comments Result',
                'verbose_name_plural': 'Comments Results',
                'db_table': 'comments_result',
            },
        ),
        migrations.CreateModel(
            name='MetadataResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_id', models.CharField(db_index=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('failed', 'Failed'), ('success', 'Success')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('raw_data', models.JSONField(blank=True, default=dict)),
                ('processed_data', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Metadata Result',
                'verbose_name_plural': 'Metadata Results',
                'db_table': 'metadata_result',
            },
        ),
        migrations.CreateModel(
            name='TranscriptResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_id', models.CharField(db_index=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('failed', 'Failed'), ('success', 'Success')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('raw_transcript', models.TextField(blank=True)),
                ('processed_segments', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'Transcript Result',
                'verbose_name_plural': 'Transcript Results',
                'db_table': 'transcript_result',
            },
        ),
        migrations.CreateModel(
            name='VideoTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_id', models.CharField(db_index=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('failed', 'Failed'), ('success', 'Success')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'yt_videos',
            },
        ),
        migrations.CreateModel(
            name='YTInsightRun',
            fields=[
                ('run_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('video_ids', models.JSONField(default=list)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('failed', 'Failed'), ('success', 'Success')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('query_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insight_runs', to='query_processor.queryrequest')),
            ],
            options={
                'db_table': 'yt_insight_run',
                'ordering': ['-created_at'],
            },
        ),
    ]
