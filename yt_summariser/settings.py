"""
Django settings for yt_summariser project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Fix for macOS fork safety issue with multiprocessing
os.environ['OBJC_DISABLE_INITIALIZE_FORK_SAFETY'] = 'YES'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-@-kj^rr)n$kq(n*j$g2^@8-r-!sxdso)4--ch)-l__gf!a)^^2')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Get allowed hosts from environment variable, fallback to specific hosts
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,yt-summariser-a7fg.onrender.com').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'api',
    'video_processor',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'yt_summariser.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'yt_summariser.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5500",
    "http://localhost:5500",
    "http://127.0.0.1:3000",
    "http://localhost:3000",
]

# For development only - allows all origins
CORS_ALLOW_ALL_ORIGINS = True

# Allow credentials to be included in CORS requests
CORS_ALLOW_CREDENTIALS = True

# Allow these headers for SSE
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
]

# ============================================================================
# EMBEDDING SERVICES CONFIGURATION
# ============================================================================

# OpenAI Configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_CONFIG = {
    'model': os.getenv('OPENAI_EMBEDDING_MODEL', 'text-embedding-3-large'),
    'max_tokens': int(os.getenv('OPENAI_MAX_TOKENS', '8191')),
    'timeout': int(os.getenv('OPENAI_TIMEOUT', '30')),
    'max_retries': int(os.getenv('OPENAI_MAX_RETRIES', '3')),
    'batch_size': int(os.getenv('OPENAI_BATCH_SIZE', '100')),
}

# Pinecone Configuration
PINECONE_CONFIG = {
    'api_key': os.getenv('PINECONE_API_KEY'),
    'environment': os.getenv('PINECONE_ENVIRONMENT', 'us-east-1-aws'),
    'index_name': os.getenv('PINECONE_INDEX_NAME', 'yt-summariser'),
    'dimension': int(os.getenv('PINECONE_DIMENSION', '3072')),  # text-embedding-3-large dimension
    'metric': os.getenv('PINECONE_METRIC', 'cosine'),
    'cloud': os.getenv('PINECONE_CLOUD', 'aws'),
    'region': os.getenv('PINECONE_REGION', 'us-east-1'),
    'timeout': int(os.getenv('PINECONE_TIMEOUT', '30')),
    'max_retries': int(os.getenv('PINECONE_MAX_RETRIES', '3')),
}

# Embedding Processing Configuration
EMBEDDING_CONFIG = {
    'chunk_size': int(os.getenv('EMBEDDING_CHUNK_SIZE', '512')),
    'chunk_overlap': int(os.getenv('EMBEDDING_CHUNK_OVERLAP', '50')),
    'min_chunk_size': int(os.getenv('EMBEDDING_MIN_CHUNK_SIZE', '100')),
    'include_descriptions': os.getenv('EMBEDDING_INCLUDE_DESCRIPTIONS', 'true').lower() == 'true',
    'batch_processing_size': int(os.getenv('EMBEDDING_BATCH_SIZE', '10')),
    'timestamp_granularity': os.getenv('EMBEDDING_TIMESTAMP_GRANULARITY', 'segment'),  # 'segment' or 'chunk'
}

# Search Configuration
SEARCH_CONFIG = {
    'default_top_k': int(os.getenv('SEARCH_DEFAULT_TOP_K', '10')),
    'max_top_k': int(os.getenv('SEARCH_MAX_TOP_K', '50')),
    'similarity_threshold': float(os.getenv('SEARCH_SIMILARITY_THRESHOLD', '0.45')),
    'timestamp_context_window': int(os.getenv('SEARCH_TIMESTAMP_CONTEXT', '30')),  # seconds
}

# Validation - Check for required environment variables in production
if not DEBUG:
    required_env_vars = {
        'OPENAI_API_KEY': OPENAI_API_KEY,
        'PINECONE_API_KEY': PINECONE_CONFIG['api_key'],
    }
    
    missing_vars = [var for var, value in required_env_vars.items() if not value]
    if missing_vars:
        raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")
